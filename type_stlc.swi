%%
%% 単純型付きラムダ計算の型チェック（型推論）をするプログラム
%%
%% 2013_06_17 @suharahiromichi
%%
%% 実行方法：
%% ?- ['type_stlc.swi'].
%% ?- go.
%%

use_occurs_check(true).                     % occurs check をする場合。
%use_occurs_check(false).                   % occurs check をする場合。

:- op(600, xfx, :).                         % Tm : T
:- op(500, xfy, ->).                        % ty_arrow の中置記法

%% has_type(Gamma, Tm, Ty).
has_type(Gamma, tm_var(X), T) :-
        atom(X), !,
        getFromContext(Gamma, X : T).
has_type(Gamma, tm_abs(X : T11, Tm12), T11 -> T12) :- !,
        atom(X),
        has_type([X : T11 | Gamma], Tm12, T12).
has_type(Gamma, tm_abs(X, Tm12), T11 -> T12) :- % tm_absの型注釈は省略できる。
        atom(X),
        has_type([X : T11 | Gamma], Tm12, T12).
has_type(Gamma, tm_app(Tm1, Tm2), T12) :-
        has_type(Gamma, Tm1, T11 -> T12),
        has_type(Gamma, Tm2, T11).
has_type(_, tm_true, ty_Bool).
has_type(_, tm_false, ty_Bool).
has_type(Gamma, tm_if(Tm1, Tm2, Tm3), T) :-
        has_type(Gamma, Tm1, ty_Bool),
        has_type(Gamma, Tm2, T),
        has_type(Gamma, Tm3, T).
%% 数値
has_type(_, tm_nat(N), ty_Nat) :-
        number(N), !.
has_type(Gamma, tm_succ(Tm1), ty_Nat) :-
        has_type(Gamma, Tm1, ty_Nat).
has_type(Gamma, tm_pred(Tm1), ty_Nat) :-
        has_type(Gamma, Tm1, ty_Nat).
has_type(Gamma, tm_mult(Tm1), ty_Nat -> ty_Nat) :-
        has_type(Gamma, Tm1, ty_Nat).
has_type(Gamma, tm_mult(Tm1, Tm2), ty_Nat) :- % multは2種類
        has_type(Gamma, Tm1, ty_Nat),
        has_type(Gamma, Tm2, ty_Nat).
has_type(Gamma, tm_if0(Tm1, Tm2, Tm3), T) :-
        has_type(Gamma, Tm1, ty_Nat),
        has_type(Gamma, Tm2, T),
        has_type(Gamma, Tm3, T).

getFromContext(Gamma, X : TA) :-
        member(X : TB, Gamma), !,
        write([X , TA, TB, Gamma]), !,
        (use_occurs_check(true) ->
         unify_with_occurs_check(TA, TB);   % Occurs Check あり。
         TA = TB).                          % Occurs Check なし。
%% 下の例 go31 の場合を参照のこと。
%% cutは、型の一致の判定（Occurs Checkによらない場合も含めて）
%% で失敗したときに、後もどりして、
%% 同名の変数（スコープによって隠蔽されているはずの変数）に、
%% マッチしないようにするためのもの。

%%%%%%%%%%%%%%%%%%%%
%% テストコード
%%%%%%%%%%%%%%%%%%%%
%% SFのサンプル
go :-                                       % true
        has_type([],
                 tm_abs(a : ty_Bool, tm_var(a)),
                 ty_Bool -> ty_Bool).

go1 :-                                      % true
        has_type([],
                 tm_abs(a : ty_Bool,
                        tm_abs(b : ty_Bool -> ty_Bool,
                               tm_app(tm_var(b),
                                      tm_app(tm_var(b), tm_var(a))))),
                 ty_Bool -> (ty_Bool -> ty_Bool) -> ty_Bool).

go2 :-                                      % false
        has_type([],
                 tm_abs(a : ty_Bool,
                        tm_abs(b : ty_Bool,
                               tm_app(tm_var(a), tm_var(b)))),
                 _).
%% いつもの例、失敗する。
go3 :-                                      % false
        has_type([],
                 tm_abs(x,
                        tm_app(tm_var(x), tm_var(x))),
                 T),
        write(T).
%% member_with_occurs_check のコメントを参照のこと。
go31 :-                                     % false
        has_type([],
                 tm_abs(x,
                        tm_abs(x,
                               tm_app(tm_var(x), tm_var(x)))),
                 T),
        write(T).

%% TaPLのサンプル
go4 :-                                      % TaPL 例22.2.2
        G = [f : X, a : Y],
        has_type(G, tm_app(tm_var(f), tm_var(a)), T),
        write([G, T]).
%% [f : Y -> Z, a : Y], T=Z

go5 :-                                      % TaPL 演習22.2.3
        has_type([],
                 tm_abs(x : X,
                        tm_abs(y : Y,
                               tm_abs(z : Z,
                                      tm_app(tm_app(tm_var(x), tm_var(z)),
                                             tm_app(tm_var(y), tm_var(z)))))),
                 T),
        write([[X,Y,Z], T]).
%% X=A->B->C, Y=A->B, Z=A, T=(A->B->C)->(A-B)->A->C

%% SFの練習問題
go6 :-                                      % true
        has_type([a : S],
                 tm_app(tm_abs(b : ty_Bool -> ty_Bool,
                               tm_var(b)),
                        tm_var(a)),
                 S),
        write(S).                           % Bool->Bool

go71 :-                                     % true
        has_type([],
                 tm_abs(b : B->B->B,
                        tm_abs(a:B,
                               tm_app(tm_var(b), tm_var(a)))),
                 T),
        write([B, T]).                      % T=(B->B->B)->B->B->B

go72 :-                                     % true.
        has_type([],
                 tm_abs(a : A->B,
                        tm_abs(b : B->C,
                               tm_abs(c : A,
                                      tm_app(tm_var(b),
                                             tm_app(tm_var(a), tm_var(c)))))),
                 T),
        write(T).

go73 :-                                     % true.
        has_type([a : S, b : U],
                 tm_abs(c : A, tm_app(tm_var(a),
                                      tm_app(tm_var(b), tm_var(c)))),
                 T),
        write([S, U, A, T]).

go74 :-                                     % true.
        has_type([a : S],
                 tm_abs(b : A, tm_app(tm_var(a), tm_app(tm_var(a), tm_var(b)))),
                 T),
        write([S, A, T]).                   % S=A->A, T=A->A

go75 :-                                     % fail
        has_type([a : S],
                 tm_app(tm_var(a), tm_abs(c : U, tm_app(tm_var(c), tm_var(a)))),
                 T),
        write([S, U, T]).

%% end

%%
%% getFromContextの補足説明
%%
%% Occurs Checkが省略時解釈の処理系の場合、あるいは、
%% Occurs Checkを一律には設定する場合
%% :- set_prolog_flag(occures_check, true).
%% であっても、
%% member述語をつかって「変数名：型」のペアを一度にとりだすのは適切ではない。
%% （適切でない例）getFromContext(Gamma, X : T) :- member(X : T, Gamma).
%%
%% 取り出し時の一致の判定でfail（Occurs Checkが原因ではない場合も含めて）したあと、
%% 後戻りして、
%% スコープで隠蔽されている（外側の）同名の別の変数にマッチしてしまう場合がある。
%% (X:TA)に対して、まず変数名の一致する「変数名：型」のペア(X:TB)を見つけてから、
%% 次に、型どうしの一致(TAとTB)をoccurs check付きで判定するようにする。
%% このとき、型が一致しなければ、cutして、同名の別の変数を探しにいかないようにする。
%%
%% 以上
%%
